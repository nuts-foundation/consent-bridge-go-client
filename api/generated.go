// Package api provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package api

import (
	"context"
	"encoding/json"
	"fmt"
	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/pkg/errors"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"
	"time"
)

// ASymmetricKey defines model for ASymmetricKey.
type ASymmetricKey struct {
	Alg *string `json:"alg,omitempty"`

	// base64 encoded
	CipherText *string `json:"cipherText,omitempty"`

	// Generic identifier used for representing BSN, agbcode, etc. It's always constructed as an URN followed by a colon (:) and then the identifying value of the given URN
	LegalEntity Identifier `json:"legalEntity"`
}

// ConsentId defines model for ConsentId.
type ConsentId struct {

	// Unique identifier assigned by the consent cordapp
	UUID string `json:"UUID"`

	// Unique hexadecimal identifier created based on BSN and private key of care provider.
	ExternalId *string `json:"externalId,omitempty"`
}

// ConsentRecord defines model for ConsentRecord.
type ConsentRecord struct {

	// SHA256 of attachment (metadata + cipherText)
	AttachmentHash *string `json:"attachmentHash,omitempty"`

	// Base64 encoded cipher_text.bin (fhir)
	CipherText *string                     `json:"cipherText,omitempty"`
	Metadata   *Metadata                   `json:"metadata,omitempty"`
	Signatures *[]PartyAttachmentSignature `json:"signatures,omitempty"`
}

// ConsentState defines model for ConsentState.
type ConsentState struct {
	ConsentId      ConsentId       `json:"consentId"`
	ConsentRecords []ConsentRecord `json:"consentRecords"`
}

// Domain defines model for Domain.
type Domain string

// FullConsentRequestState defines model for FullConsentRequestState.
type FullConsentRequestState struct {

	// user generated comment (usually a closing reason)
	Comment        *string         `json:"comment,omitempty"`
	ConsentId      ConsentId       `json:"consentId"`
	ConsentRecords []ConsentRecord `json:"consentRecords"`

	// the date-time when the request was made
	CreatedAt *time.Time `json:"createdAt,omitempty"`

	// Generic identifier used for representing BSN, agbcode, etc. It's always constructed as an URN followed by a colon (:) and then the identifying value of the given URN
	InitiatingLegalEntity Identifier `json:"initiatingLegalEntity"`

	// The X500 name of the node that initiated the transaction (read-only)
	InitiatingNode *string      `json:"initiatingNode,omitempty"`
	LegalEntities  []Identifier `json:"legalEntities"`

	// the date-time of the latest recorded change in state (read-only)
	UpdatedAt *time.Time `json:"updatedAt,omitempty"`
}

// Identifier defines model for Identifier.
type Identifier string

// JWK defines model for JWK.
type JWK struct {
	AdditionalProperties map[string]interface{} `json:"-"`
}

// Metadata defines model for Metadata.
type Metadata struct {

	// Hash of the unencrypted consent FHIR resource. Can be used for uniqueness.
	ConsentRecordHash      string          `json:"consentRecordHash"`
	Domain                 []Domain        `json:"domain"`
	OrganisationSecureKeys []ASymmetricKey `json:"organisationSecureKeys"`
	Period                 Period          `json:"period"`

	// SHA256 of cipherText bytes
	PreviousAttachmentHash *string      `json:"previousAttachmentHash,omitempty"`
	SecureKey              SymmetricKey `json:"secureKey"`
}

// PartyAttachmentSignature defines model for PartyAttachmentSignature.
type PartyAttachmentSignature struct {

	// Hexidecimal SecureHash value
	Attachment string `json:"attachment"`

	// Generic identifier used for representing BSN, agbcode, etc. It's always constructed as an URN followed by a colon (:) and then the identifying value of the given URN
	LegalEntity Identifier       `json:"legalEntity"`
	Signature   SignatureWithKey `json:"signature"`
}

// Period defines model for Period.
type Period struct {
	ValidFrom time.Time  `json:"validFrom"`
	ValidTo   *time.Time `json:"validTo,omitempty"`
}

// SignatureWithKey defines model for SignatureWithKey.
type SignatureWithKey struct {

	// base64 encoded bytes
	Data string `json:"data"`

	// as described by https://tools.ietf.org/html/rfc7517. Modelled as object so libraries can parse the tokens themselves.
	PublicKey JWK `json:"publicKey"`
}

// StateMachineId defines model for StateMachineId.
type StateMachineId string

// SymmetricKey defines model for SymmetricKey.
type SymmetricKey struct {
	Alg string `json:"alg"`
	Iv  string `json:"iv"`
}

// Getter for additional properties for JWK. Returns the specified
// element and whether it was found
func (a JWK) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for JWK
func (a *JWK) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for JWK to handle AdditionalProperties
func (a *JWK) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return errors.Wrap(err, fmt.Sprintf("error unmarshaling field %s", fieldName))
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for JWK to handle AdditionalProperties
func (a JWK) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling '%s'", fieldName))
		}
	}
	return json.Marshal(object)
}

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A callback for modifying requests which are generated before sending over
	// the network.
	RequestEditor RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = http.DefaultClient
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditor = fn
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// GetAttachmentBySecureHash request
	GetAttachmentBySecureHash(ctx context.Context, secureHash string) (*http.Response, error)

	// GetConsentRequestStateById request
	GetConsentRequestStateById(ctx context.Context, uuid string) (*http.Response, error)
}

func (c *Client) GetAttachmentBySecureHash(ctx context.Context, secureHash string) (*http.Response, error) {
	req, err := NewGetAttachmentBySecureHashRequest(c.Server, secureHash)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) GetConsentRequestStateById(ctx context.Context, uuid string) (*http.Response, error) {
	req, err := NewGetConsentRequestStateByIdRequest(c.Server, uuid)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

// NewGetAttachmentBySecureHashRequest generates requests for GetAttachmentBySecureHash
func NewGetAttachmentBySecureHashRequest(server string, secureHash string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "secureHash", secureHash)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/api/attachment/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetConsentRequestStateByIdRequest generates requests for GetConsentRequestStateById
func NewGetConsentRequestStateByIdRequest(server string, uuid string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "uuid", uuid)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/api/consent_request_state/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// GetAttachmentBySecureHash request
	GetAttachmentBySecureHashWithResponse(ctx context.Context, secureHash string) (*GetAttachmentBySecureHashResponse, error)

	// GetConsentRequestStateById request
	GetConsentRequestStateByIdWithResponse(ctx context.Context, uuid string) (*GetConsentRequestStateByIdResponse, error)
}

type GetAttachmentBySecureHashResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetAttachmentBySecureHashResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAttachmentBySecureHashResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetConsentRequestStateByIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FullConsentRequestState
}

// Status returns HTTPResponse.Status
func (r GetConsentRequestStateByIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetConsentRequestStateByIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// GetAttachmentBySecureHashWithResponse request returning *GetAttachmentBySecureHashResponse
func (c *ClientWithResponses) GetAttachmentBySecureHashWithResponse(ctx context.Context, secureHash string) (*GetAttachmentBySecureHashResponse, error) {
	rsp, err := c.GetAttachmentBySecureHash(ctx, secureHash)
	if err != nil {
		return nil, err
	}
	return ParseGetAttachmentBySecureHashResponse(rsp)
}

// GetConsentRequestStateByIdWithResponse request returning *GetConsentRequestStateByIdResponse
func (c *ClientWithResponses) GetConsentRequestStateByIdWithResponse(ctx context.Context, uuid string) (*GetConsentRequestStateByIdResponse, error) {
	rsp, err := c.GetConsentRequestStateById(ctx, uuid)
	if err != nil {
		return nil, err
	}
	return ParseGetConsentRequestStateByIdResponse(rsp)
}

// ParseGetAttachmentBySecureHashResponse parses an HTTP response from a GetAttachmentBySecureHashWithResponse call
func ParseGetAttachmentBySecureHashResponse(rsp *http.Response) (*GetAttachmentBySecureHashResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetAttachmentBySecureHashResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetConsentRequestStateByIdResponse parses an HTTP response from a GetConsentRequestStateByIdWithResponse call
func ParseGetConsentRequestStateByIdResponse(rsp *http.Response) (*GetConsentRequestStateByIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetConsentRequestStateByIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FullConsentRequestState
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

