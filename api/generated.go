// Package api provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package api

import (
	"context"
	"encoding/base64"
	"fmt"
	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"net/http"
	"strings"
	"time"
)

// ASymmetricKey defines component schema for ASymmetricKey.
type ASymmetricKey struct {
	Alg         *string    `json:"alg,omitempty"`
	CipherText  *string    `json:"cipherText,omitempty"`
	LegalEntity Identifier `json:"legalEntity"`
}

// ConsentId defines component schema for ConsentId.
type ConsentId struct {
	UUID       *string `json:"UUID,omitempty"`
	ExternalId *string `json:"externalId,omitempty"`
}

// Domain defines component schema for Domain.
type Domain string

// FullConsentRequestState defines component schema for FullConsentRequestState.
type FullConsentRequestState struct {
	AttachmentHashes []string                   `json:"attachmentHashes,omitempty"`
	CipherText       *string                    `json:"cipherText,omitempty"`
	ConsentId        ConsentId                  `json:"consentId"`
	LegalEntities    []Identifier               `json:"legalEntities"`
	Metadata         *Metadata                  `json:"metadata,omitempty"`
	Signatures       []PartyAttachmentSignature `json:"signatures,omitempty"`
}

// Identifier defines component schema for Identifier.
type Identifier string

// Metadata defines component schema for Metadata.
type Metadata struct {
	Domain                 []Domain        `json:"domain"`
	OrganisationSecureKeys []ASymmetricKey `json:"organisationSecureKeys"`
	Period                 Period          `json:"period"`
	SecureKey              SymmetricKey    `json:"secureKey"`
}

// PartyAttachmentSignature defines component schema for PartyAttachmentSignature.
type PartyAttachmentSignature struct {
	Attachment  string           `json:"attachment"`
	LegalEntity Identifier       `json:"legalEntity"`
	Signature   SignatureWithKey `json:"signature"`
}

// Period defines component schema for Period.
type Period struct {
	ValidFrom time.Time  `json:"validFrom"`
	ValidTo   *time.Time `json:"validTo,omitempty"`
}

// SignatureWithKey defines component schema for SignatureWithKey.
type SignatureWithKey struct {
	Data      string `json:"data"`
	PublicKey string `json:"publicKey"`
}

// StateMachineId defines component schema for StateMachineId.
type StateMachineId string

// SymmetricKey defines component schema for SymmetricKey.
type SymmetricKey struct {
	Alg string `json:"alg"`
	Iv  string `json:"iv"`
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example.
	Server string

	// HTTP client with any customized settings, such as certificate chains.
	Client http.Client

	// A callback for modifying requests which are generated before sending over
	// the network.
	RequestEditor func(req *http.Request, ctx context.Context) error
}

// The interface specification for the client above.
type ClientInterface interface {

	// GetAttachmentBySecureHash request
	GetAttachmentBySecureHash(ctx context.Context, secureHash string) (*http.Response, error)

	// GetConsentRequestStateById request
	GetConsentRequestStateById(ctx context.Context, uuid string) (*http.Response, error)
}

// GetAttachmentBySecureHash request
func (c *Client) GetAttachmentBySecureHash(ctx context.Context, secureHash string) (*http.Response, error) {
	req, err := NewGetAttachmentBySecureHashRequest(c.Server, secureHash)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(req, ctx)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

// GetConsentRequestStateById request
func (c *Client) GetConsentRequestStateById(ctx context.Context, uuid string) (*http.Response, error) {
	req, err := NewGetConsentRequestStateByIdRequest(c.Server, uuid)
	if err != nil {
		return nil, err
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r *getAttachmentBySecureHashResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// ParsegetAttachmentBySecureHashResponse parses an HTTP response from a GetAttachmentBySecureHashWithResponse call
func ParsegetAttachmentBySecureHashResponse(rsp *http.Response) (*getAttachmentBySecureHashResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &getAttachmentBySecureHashResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case rsp.StatusCode == 200:
	// Content-type (application/octet-stream) unsupported
	case rsp.StatusCode == 404:
		break // No content-type
	}

	return response, nil
}

// NewGetConsentRequestStateByIdRequest generates requests for GetConsentRequestStateById
func NewGetConsentRequestStateByIdRequest(server string, uuid string) (*http.Request, error) {
	var err error
	// ------------- Path parameter "uuid" -------------
	var uuid string

	err = runtime.BindStyledParameter("simple", false, "uuid", ctx.Param("uuid"), &uuid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter uuid: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetConsentRequestStateById(ctx, uuid)
	return err
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET("/api/attachment/:secureHash", wrapper.GetAttachmentBySecureHash)
	router.GET("/api/consent_request_state/:uuid", wrapper.GetConsentRequestStateById)

}

