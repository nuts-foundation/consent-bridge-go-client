// Package api provides primitives to interact the openapi HTTP API.
//
// This is an autogenerated file, any edits which you make here will be lost!
package api

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"fmt"
	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"net/http"
	"strings"
	"time"
)

// ASymmetricKey defines component schema for ASymmetricKey.
type ASymmetricKey struct {
	Alg         *string    `json:"alg,omitempty"`
	CipherText  *string    `json:"cipherText,omitempty"`
	LegalEntity Identifier `json:"legalEntity"`
}

// ConsentId defines component schema for ConsentId.
type ConsentId struct {
	UUID       *string `json:"UUID,omitempty"`
	ExternalId *string `json:"externalId,omitempty"`
}

// ConsentRecord defines component schema for ConsentRecord.
type ConsentRecord struct {
	AttachmentHash *string                    `json:"attachmentHash,omitempty"`
	CipherText     *string                    `json:"cipherText,omitempty"`
	Metadata       *Metadata                  `json:"metadata,omitempty"`
	Signatures     []PartyAttachmentSignature `json:"signatures,omitempty"`
}

// ConsentState defines component schema for ConsentState.
type ConsentState struct {
	ConsentId      ConsentId       `json:"consentId"`
	ConsentRecords []ConsentRecord `json:"consentRecords"`
}

// Domain defines component schema for Domain.
type Domain string

// FullConsentRequestState defines component schema for FullConsentRequestState.
type FullConsentRequestState struct {
	ConsentId      ConsentId       `json:"consentId"`
	ConsentRecords []ConsentRecord `json:"consentRecords,omitempty"`
	LegalEntities  []Identifier    `json:"legalEntities"`
}

// Identifier defines component schema for Identifier.
type Identifier string

// Metadata defines component schema for Metadata.
type Metadata struct {
	Domain                 []Domain        `json:"domain"`
	OrganisationSecureKeys []ASymmetricKey `json:"organisationSecureKeys"`
	Period                 Period          `json:"period"`
	SecureKey              SymmetricKey    `json:"secureKey"`
}

// PartyAttachmentSignature defines component schema for PartyAttachmentSignature.
type PartyAttachmentSignature struct {
	Attachment  string           `json:"attachment"`
	LegalEntity Identifier       `json:"legalEntity"`
	Signature   SignatureWithKey `json:"signature"`
}

// Period defines component schema for Period.
type Period struct {
	ValidFrom time.Time  `json:"validFrom"`
	ValidTo   *time.Time `json:"validTo,omitempty"`
}

// SignatureWithKey defines component schema for SignatureWithKey.
type SignatureWithKey struct {
	Data      string `json:"data"`
	PublicKey string `json:"publicKey"`
}

// StateMachineId defines component schema for StateMachineId.
type StateMachineId string

// SymmetricKey defines component schema for SymmetricKey.
type SymmetricKey struct {
	Alg string `json:"alg"`
	Iv  string `json:"iv"`
}

// Client which conforms to the OpenAPI3 specification for this service. The
// server should be fully qualified with shema and server, ie,
// https://deepmap.com.
type Client struct {
	Server string
	Client http.Client
}

// GetAttachmentBySecureHash request
func (c *Client) GetAttachmentBySecureHash(ctx context.Context, secureHash string) (*http.Response, error) {
	req, err := NewGetAttachmentBySecureHashRequest(c.Server, secureHash)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	return c.Client.Do(req)
}

// GetConsentRequestStateById request
func (c *Client) GetConsentRequestStateById(ctx context.Context, uuid string) (*http.Response, error) {
	req, err := NewGetConsentRequestStateByIdRequest(c.Server, uuid)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	return c.Client.Do(req)
}

// NewGetAttachmentBySecureHashRequest generates requests for GetAttachmentBySecureHash
func NewGetAttachmentBySecureHashRequest(server string, secureHash string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "secureHash", secureHash)
	if err != nil {
		return nil, err
	}

	queryURL := fmt.Sprintf("%s/api/attachment/%s", server, pathParam0)

	req, err := http.NewRequest("GET", queryURL, nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetConsentRequestStateByIdRequest generates requests for GetConsentRequestStateById
func NewGetConsentRequestStateByIdRequest(server string, uuid string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "uuid", uuid)
	if err != nil {
		return nil, err
	}

	queryURL := fmt.Sprintf("%s/api/consent_request_state/%s", server, pathParam0)

	req, err := http.NewRequest("GET", queryURL, nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"4684E/6PopUzy+V/AwAA//+OUjX+wREAAA==",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}

