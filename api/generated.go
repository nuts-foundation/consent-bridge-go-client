// Package api provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package api

import (
	"context"
	"encoding/json"
	"fmt"
	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/labstack/echo/v4"
	"io/ioutil"
	"net/http"
	"strings"
	"time"
)

// ASymmetricKey defines component schema for ASymmetricKey.
type ASymmetricKey struct {
	Alg         *string    `json:"alg,omitempty"`
	CipherText  *string    `json:"cipherText,omitempty"`
	LegalEntity Identifier `json:"legalEntity"`
}

// ConsentId defines component schema for ConsentId.
type ConsentId struct {
	UUID       *string `json:"UUID,omitempty"`
	ExternalId *string `json:"externalId,omitempty"`
}

// ConsentRequestState defines component schema for ConsentRequestState.
type ConsentRequestState struct {
	Attachments   []string                   `json:"attachments"`
	ConsentId     ConsentId                  `json:"consentId"`
	LegalEntities []Identifier               `json:"legalEntities"`
	Signatures    []PartyAttachmentSignature `json:"signatures"`
}

// Domain defines component schema for Domain.
type Domain string

// FullConsentRequestState defines component schema for FullConsentRequestState.
type FullConsentRequestState struct {
	CipherText    string                     `json:"cipherText"`
	ConsentId     ConsentId                  `json:"consentId"`
	LegalEntities []Identifier               `json:"legalEntities"`
	Metadata      Metadata                   `json:"metadata"`
	Signatures    []PartyAttachmentSignature `json:"signatures"`
}

// Identifier defines component schema for Identifier.
type Identifier string

// Metadata defines component schema for Metadata.
type Metadata struct {
	Domain                 []Domain        `json:"domain"`
	OrganisationSecureKeys []ASymmetricKey `json:"organisationSecureKeys"`
	Period                 Period          `json:"period"`
	SecureKey              SymmetricKey    `json:"secureKey"`
}

// NewConsentRequestState defines component schema for NewConsentRequestState.
type NewConsentRequestState struct {
	Attachment string   `json:"attachment"`
	ExternalId string   `json:"externalId"`
	Metadata   Metadata `json:"metadata"`
}

// PartyAttachmentSignature defines component schema for PartyAttachmentSignature.
type PartyAttachmentSignature struct {
	Attachment  string           `json:"attachment"`
	LegalEntity Identifier       `json:"legalEntity"`
	Signature   SignatureWithKey `json:"signature"`
}

// Period defines component schema for Period.
type Period struct {
	ValidFrom time.Time  `json:"validFrom"`
	ValidTo   *time.Time `json:"validTo,omitempty"`
}

// SignatureWithKey defines component schema for SignatureWithKey.
type SignatureWithKey struct {
	Data      string `json:"data"`
	PublicKey string `json:"publicKey"`
}

// StateMachineId defines component schema for StateMachineId.
type StateMachineId string

// SymmetricKey defines component schema for SymmetricKey.
type SymmetricKey struct {
	Alg string `json:"alg"`
	Iv  string `json:"iv"`
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example.
	Server string

	// HTTP client with any customized settings, such as certificate chains.
	Client http.Client

	// A callback for modifying requests which are generated before sending over
	// the network.
	RequestEditor func(req *http.Request, ctx context.Context) error
}

// The interface specification for the client above.
type ClientInterface interface {

	// GetAttachmentBySecureHash request
	GetAttachmentBySecureHash(ctx context.Context, secureHash string) (*http.Response, error)

	// GetConsentRequestStateById request
	GetConsentRequestStateById(ctx context.Context, uuid string) (*http.Response, error)
}

// GetAttachmentBySecureHash request
func (c *Client) GetAttachmentBySecureHash(ctx context.Context, secureHash string) (*http.Response, error) {
	req, err := NewGetAttachmentBySecureHashRequest(c.Server, secureHash)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(req, ctx)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

// GetConsentRequestStateById request
func (c *Client) GetConsentRequestStateById(ctx context.Context, uuid string) (*http.Response, error) {
	req, err := NewGetConsentRequestStateByIdRequest(c.Server, uuid)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(req, ctx)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses returns a ClientWithResponses with a default Client:
func NewClientWithResponses(server string) *ClientWithResponses {
	return &ClientWithResponses{
		ClientInterface: &Client{
			Client: http.Client{},
			Server: server,
		},
	}
}

// getAttachmentBySecureHashResponse is returned by Client.GetAttachmentBySecureHash()
type getAttachmentBySecureHashResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r *getAttachmentBySecureHashResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r *getAttachmentBySecureHashResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// ParsegetAttachmentBySecureHashResponse parses an HTTP response from a GetAttachmentBySecureHashWithResponse call
func ParsegetAttachmentBySecureHashResponse(rsp *http.Response) (*getAttachmentBySecureHashResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &getAttachmentBySecureHashResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case rsp.StatusCode == 200:
	// Content-type (application/octet-stream) unsupported
	case rsp.StatusCode == 404:
		break // No content-type
	}

	return response, nil
}

// GetAttachmentBySecureHash request returning *GetAttachmentBySecureHashResponse
func (c *ClientWithResponses) GetAttachmentBySecureHashWithResponse(ctx context.Context, secureHash string) (*getAttachmentBySecureHashResponse, error) {
	rsp, err := c.GetAttachmentBySecureHash(ctx, secureHash)
	if err != nil {
		return nil, err
	}
	return ParsegetAttachmentBySecureHashResponse(rsp)
}

// getConsentRequestStateByIdResponse is returned by Client.GetConsentRequestStateById()
type getConsentRequestStateByIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ConsentRequestState
}

// Status returns HTTPResponse.Status
func (r *getConsentRequestStateByIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r *getConsentRequestStateByIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// ParsegetConsentRequestStateByIdResponse parses an HTTP response from a GetConsentRequestStateByIdWithResponse call
func ParsegetConsentRequestStateByIdResponse(rsp *http.Response) (*getConsentRequestStateByIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &getConsentRequestStateByIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		response.JSON200 = &ConsentRequestState{}
		if err := json.Unmarshal(bodyBytes, response.JSON200); err != nil {
			return nil, err
		}
	case rsp.StatusCode == 404:
		break // No content-type
	}

	return response, nil
}

// GetConsentRequestStateById request returning *GetConsentRequestStateByIdResponse
func (c *ClientWithResponses) GetConsentRequestStateByIdWithResponse(ctx context.Context, uuid string) (*getConsentRequestStateByIdResponse, error) {
	rsp, err := c.GetConsentRequestStateById(ctx, uuid)
	if err != nil {
		return nil, err
	}
	return ParsegetConsentRequestStateByIdResponse(rsp)
}

// NewGetAttachmentBySecureHashRequest generates requests for GetAttachmentBySecureHash
func NewGetAttachmentBySecureHashRequest(server string, secureHash string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "secureHash", secureHash)
	if err != nil {
		return nil, err
	}

	queryUrl := fmt.Sprintf("%s/api/attachment/%s", server, pathParam0)

	req, err := http.NewRequest("GET", queryUrl, nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetConsentRequestStateByIdRequest generates requests for GetConsentRequestStateById
func NewGetConsentRequestStateByIdRequest(server string, uuid string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "uuid", uuid)
	if err != nil {
		return nil, err
	}

	queryUrl := fmt.Sprintf("%s/api/consent_request_state/%s", server, pathParam0)

	req, err := http.NewRequest("GET", queryUrl, nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// download an attachment identified by its hash (GET /api/attachment/{secureHash})
	GetAttachmentBySecureHash(ctx echo.Context, secureHash string) error
	// Get a consent request state by its UUID (GET /api/consent_request_state/{uuid})
	GetConsentRequestStateById(ctx echo.Context, uuid string) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetAttachmentBySecureHash converts echo context to params.
func (w *ServerInterfaceWrapper) GetAttachmentBySecureHash(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "secureHash" -------------
	var secureHash string

	err = runtime.BindStyledParameter("simple", false, "secureHash", ctx.Param("secureHash"), &secureHash)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter secureHash: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetAttachmentBySecureHash(ctx, secureHash)
	return err
}

// GetConsentRequestStateById converts echo context to params.
func (w *ServerInterfaceWrapper) GetConsentRequestStateById(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "uuid" -------------
	var uuid string

	err = runtime.BindStyledParameter("simple", false, "uuid", ctx.Param("uuid"), &uuid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter uuid: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetConsentRequestStateById(ctx, uuid)
	return err
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router runtime.EchoRouter, si ServerInterface) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET("/api/attachment/:secureHash", wrapper.GetAttachmentBySecureHash)
	router.GET("/api/consent_request_state/:uuid", wrapper.GetConsentRequestStateById)

}

